---
##############################
# Create and start a gluster volume
# Requires:
#   volume_name: name of the volume to create
#   brick_size: capacity of the bricks

- hosts: worker0, worker1, worker2
  become: true
  tasks:
    - name: Create LV
      command: lvcreate -V {{ brick_size }} -n {{ volume_name }} vg_brick/pool
      args:
        creates: /dev/vg_brick/{{ volume_name }}

    - name: Make sure mount point exists
      file:
        state: directory
        name: /bricks/{{ volume_name }}

    - name: Make sure the brick is not mounted
      mount:
        path: /bricks/{{ volume_name }}
        state: unmounted

    - name: Format brick
      filesystem:
        fstype: xfs
        dev: /dev/vg_brick/{{ volume_name }}
        opts: -i size=512

    - name: Mount file systems
      mount:
        path: /bricks/{{ volume_name }}
        src: /dev/vg_brick/{{ volume_name }}
        fstype: xfs
        opts: rw,noatime,inode64,nouuid
        state: mounted

    - name: Create brick directory
      file:
        name: /bricks/{{ volume_name }}/brick
        state: directory


- hosts: master
  vars:
    gluster_nodes: [worker0, worker1, worker2]
    ns: glusterfs
  tasks:
    - name: Get a gluster pod name
      command: kubectl -n {{ ns }} get po -l glusterfs-node=pod -o jsonpath='{.items[0].metadata.name}'
      register: gpodname

    - name: Create volume
      command: "kubectl -n {{ ns }} exec {{ gpodname.stdout }} -- gluster volume create {{ volume_name }} replica 3 arbiter 1 {{ gluster_nodes | map('regex_replace', '(.+)', '\\1:/bricks/ZZZZZ/brick') | join (' ') | replace('ZZZZZ', volume_name) }}"

    - name: Start volume
      command: kubectl -n {{ ns }} exec {{ gpodname.stdout }} -- gluster volume start {{ volume_name }}
